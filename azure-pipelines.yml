# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main # This indicates that the pipeline will fire automatically when there are changes to the main branch.
variables:
denodoPath: 'C:/Denodo/DenodoPlatform8.0/bin'
testingToolPath: 'C:/Denodo/denodo-testing-tool-8.0-20230425'
pipelineTmpPath: 'C:/Denodo/DenodoPlatform8.0/pipeline_files'
server: 'dnd-v-yisc003a.centralindia.cloudapp.azure.com:9999/project1'
vqlFileName: 'vcscommand.vql'
testingToolConfig: 'configuration.properties'
testingToolTest: 'test1.denodotest'
jobs:
- job: AgentJob
pool: Denodo_cicd_agent_pool
name: 'Denodo_cicd_agent'

steps:

script: |
REM Create VQL file with DVCSPULL command
echo DVCSPULL project1; > $(pipelineTmpPath)/$(vqlFileName)
displayName: 'Create DVCSPULL VQL File'

- script: |

REM Use import script to execute PULL

$(denodoPath)/import.bat --singleuser --file "$
(pipelineTmpPath)/$(vqlFileName)" --server $(server)?admin@$
(PASSWORD)

displayName: 'Pull changes to master VDP'

- script: |
REM locate in Denodo folder
cd $(denodoPath)
REM execute export script
export.bat -l admin -p $(PASSWORD) -h $(server) -f $
(pipelineTmpPath)/$(REVISION_NAME) -P includejars=yes -P
includescanners=yes -P includeCustomComponents=yes -P
replaceExistingElements=yes -P includeCreateDatabase=yes
displayName: 'Export VDP from dev1 to VQL'
env:
PASSWORD: $(PASSWORD)
REVISION: $(REVISION_NAME)

- task: PublishBuildArtifacts@1
inputs:
PathtoPublish: '$(pipelineTmpPath)/$(REVISION_NAME)'
ArtifactName: 'VQL for Revision'
publishLocation: 'Container'

- script: |
REM Convert vql file of db to base64 and use Rest Api to create revision
cd $(pipelineTmpPath)
python3 base64revision.py -s localhost -p 10090 -v $
(REVISION_NAME) -n revision_test -d rev_desc_test -e 7 -c
deploy_test -u $(USERNAME) -a $(PASSWORD)
displayName: 'Create revision with Denodo Rest Api '

- script: |
REM Retry deletion of both temporary VQL file and REVISION_NAME file until they are deleted
:retryVql
del "%pipelineTmpPath%\%vqlFileName%" 2> NUL
if exist "%pipelineTmpPath%\%vqlFileName%" (
REM Wait for a second before retrying
timeout /t 1 /nobreak > NUL
goto retryVql
)
:retryRevision
del "%pipelineTmpPath%\%REVISION_NAME%" 2> NUL
if exist "%pipelineTmpPath%\%REVISION_NAME%" (
REM Wait for a second before retrying
timeout /t 1 /nobreak > NUL
goto retryRevision
)
displayName: 'Retry Delete Temporary Pull VQL and REVISION Files'

